Building a RESTful Web Service with Spring Boot Actuator
    Spring Boot Actuator is a sub-project of Spring Boot.
    It adds several production grade services to your application with little effort on your part.
    In this guide, you will build an application and then see how to add these services.

What You Will build
    This guide takes you through creating a “Hello, world” RESTful web service with Spring Boot Actuator.
    You will build a service that accepts the following HTTP GET request:
        $ curl http://localhost:9000/hello-world
    It responds with the following JSON:
        {"id":1,"content":"Hello, World!"}COPY
    There are also many features added to your application for managing the service in a production (or other) environment.
    The business functionality of the service you build is the same as in Building a RESTful Web Service.
    You need need not use that guide to take advantage of this one, although it might be interesting to compare the results.

Initial dependencies:
Spring web, Spring Boot Actuator


1) Run the Empty Service
   The Spring Initializr creates an empty application that you can use to get started. The following example (from src/main/java/com/example/actuatorservice/ActuatorServiceApplication in the initial directory) shows the class created by the Spring Initializr:
   The @SpringBootApplication annotation provides a load of defaults (like the embedded servlet container), depending on the contents of your classpath and other things. It also turns on Spring MVC’s @EnableWebMvc annotation, which activates web endpoints.

   There are no endpoints defined in this application, but there is enough to launch things and see some of Actuator’s features.
   The SpringApplication.run() command knows how to launch the web application. All you need to do is run the following command:

   $ ./gradlew clean build && java -jar build/libs/gs-actuator-service-0.1.0.jarCOPY
   You have yet to write any code, so what is happening? To see the answer, wait for the server to start, open another terminal, and try the following command (shown with its output):

   =>GUI run -> terminal curl

   $ curl localhost:8080
     {"timestamp":"2022-12-02T17:13:21.556+00:00","status":404,"error":"Not Found","path":"/"}
   The output of the preceding command indicates that the server is running but that you have not defined any business endpoints yet.
   Instead of a default container-generated HTML error response, you see a generic JSON response from the Actuator /error endpoint.
   You can see in the console logs from the server startup which endpoints are provided out of the box.
   You can try a few of those endpoints, including the /health endpoint.
   The following example shows how to do so:
   $ curl localhost:8080/error
    {"timestamp":"2022-12-02T17:27:56.519+00:00","status":999,"error":"None"}%

   $ curl localhost:8080/health
    {"timestamp":"2022-12-02T17:28:21.596+00:00","status":404,"error":"Not Found","path":"/health"}%

   $ curl localhost:8080/actuator
    {"_links":{"self":{"href":"http://localhost:8080/actuator","templated":false},"health-path":{"href":"http://localhost:8080/actuator/health/{*path}","templated":true},"health":{"href":"http://localhost:8080/actuator/health","templated":false}}}%

   $ curl localhost:8080/actuator/health
    {"status":"UP"}
   The status is UP, so the actuator service is running.

   See Spring Boot’s Actuator Project for more details.

2) Create a Representation Class
   First, you need to give some thought to what your API will look like.

   You want to handle GET requests for /hello-world, optionally with a name query parameter.
   In response to such a request, you want to send back JSON, representing a greeting, that looks something like the following:
     {
       "id": 1,
       "content": "Hello, World!"
     }
   The id field is a unique identifier for the greeting, and content contains the textual representation of the greeting.

   To model the greeting representation, create a representation class. The following listing (from src/main/java/com/example/actuatorservice/Greeting.java) shows the Greeting class:

   Now that you need to create the endpoint controller that will serve the representation class.

3) Create a Resource Controller
   In Spring, REST endpoints are Spring MVC controllers.
   The following Spring MVC controller (from src/main/java/com/example/actuatorservice/HelloWorldController.java) handles a GET request for the /hello-world endpoint and returns the Greeting resource:

   The key difference between a human-facing controller and a REST endpoint controller is in how the response is created.
   Rather than rely on a view (such as JSP) to render model data in HTML, an endpoint controller returns the data to be written directly to the body of the response.

   The @ResponseBody annotation tells Spring MVC not to render a model into a view but, rather, to write the returned object into the response body.
   It does so by using one of Spring’s message converters. Because Jackson 2 is in the classpath, MappingJackson2HttpMessageConverter will handle the conversion of a Greeting object to JSON if the request’s Accept header specifies that JSON should be returned.

   *How do you know Jackson 2 is on the classpath? Either run ` mvn dependency:tree` or ./gradlew dependencies, and you get a detailed tree of dependencies that includes Jackson 2.x. You can also see that it comes from /spring-boot-starter-json, itself imported by spring-boot-starter-web.

4) Run the Application
   You can run the application from a custom main class or directly from one of the configuration classes.
   For this simple example, you can use the SpringApplication helper class. Note that this is the application class that the Spring Initializr created for you, and you need not even modify it for it to work for this simple application. The following listing (from src/main/java/com/example/actuatorservice/HelloWorldApplication.java) shows the application class:

   In a conventional Spring MVC application, you would add @EnableWebMvc to turn on key behaviors, including configuration of a DispatcherServlet. But Spring Boot turns on this annotation automatically when it detects spring-webmvc on your classpath.
   This sets you up to build a controller in an upcoming step.

   The @SpringBootApplication annotation also brings in a @ComponentScan annotation, which tells Spring to scan the com.example.actuatorservice package for those controllers (along with any other annotated component classes).

5) Build an executable JAR
   You can run the application
    Once the service is running (because you ran spring-boot:run in a terminal), you can test it by running the following command in a separate terminal:

    $ curl localhost:8080/hello-world
    {"id":1,"content":"Hello, Stranger!"}

